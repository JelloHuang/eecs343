1. Several goals, including resource utilization, timeliness and robustness, guide the design of an operating system. Give an example of two such design goals and explain how they might contradict each other.

Two common design goals are security and high performance. Depending on how these are implemented, these can very easily contradict each other, as they do in a microkernel architecture.

2. List three hardware features that enable the implementation of operating system functionality and explain the significance of each. For instance, a fixed rate clock allows the creation of a variable timer for timesharing.

Memory protection is a feature of the architecture that allows OSes to prevent processes from modifying sections of memory that they shouldn't. Protected mode is a feature that allows software to utilize virtual memory. Interrupts are also features that are used for system calls.

3. What is the purpose of a system call in an operating system?

A system call is what lets software make a request to the kernel via an interrupt.

4. To a programmer, a system call looks like any other call to a library procedure. Is it important that a programmer know which library procedures result in system calls? Under what circumstances and why?

It is important in cases where performance is an issue because every time you make a system call, you take a performance hit.

5. How do user programs and system services interact in a microkernel architecture? What are the advantages/disadvantages of the microkernel approach to system design?

They interact with message passing. Microkernels are more secure (only giving code necessary privileges) but slower because it requires more message passing and more context switching.

6. From the course webpage download the handout for an implementation of Conway's Game of Life. After downloading it, follow the directions from the Projects' section. The life directory includes an incomplete Makefile with a few dfinitions and mostly empty targets. Your task is to complete this Makefile without changing the rest of the project file names or locations). Please include the body of your new Makefile with the rest of this assignment.

CC=gcc
CFLAGS=-O3 -Wall -Wextra -Werror -pg

all: life.o tools.o
	$(CC) $(CFLAGS) life.o tools.o -o life
life.o: life.c tools/tools.h
	$(CC) $(CFLAGS) -c life.c
tools.o: tools/tools.c tools/tools.h
	$(CC) $(CFLAGS) -c tools/tools.c
clean:
	rm -f life.o tools.o life gmon.out

